{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/data.service.ts","webpack:///./src/app/home/home.component.css","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/material.ts","webpack:///./src/app/settings/settings.component.css","webpack:///./src/app/settings/settings.component.html","webpack:///./src/app/settings/settings.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".title{\\r\\n    border-bottom: 1px solid teal;\\r\\n}\\r\\n.nav-container{\\r\\n    display: flex;\\r\\n    justify-content: center;\\r\\n}\"","module.exports = \"<h1 class=\\\"text-center primary title\\\">Welcome to the Weather App</h1>\\n\\n<div class=\\\"nav-container\\\">\\n  <a mat-button routerLink=\\\"/home\\\" class=\\\"btn btn-praimary\\\">Home</a>\\n  <a mat-button routerLink=\\\"/settings\\\" class=\\\"btn btn-praimary\\\">Settings</a>\\n</div>\\n<br>\\n<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\nimport { dataService } from './data.service';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [dataService]\n})\nexport class AppComponent {\n  title = 'app';\n\n  constructor( private data:dataService){}\n\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\nimport { SettingsComponent } from './settings/settings.component';\nimport { dataService } from './data.service';\nimport { RouterModule } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from './material';\nconst appRoutes = [\n  {\n    path:'', component:HomeComponent\n  },\n  {\n    path:'home',component:HomeComponent\n  },\n  {\n    path:'settings', component:SettingsComponent\n  }\n]\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    SettingsComponent\n  ],\n  imports: [\n    BrowserModule,\n    RouterModule.forRoot(appRoutes),\n    HttpClientModule,\n    BrowserAnimationsModule,\n    MaterialModule\n  ],\n  bootstrap: [AppComponent]\n})                                          \nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient,HttpErrorResponse } from '@angular/common/http';\nimport { map,catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/internal/Observable';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\n\nexport class dataService {\n\n  \n  apiKey = 'f7879ce630d05897fa0b0587217b0d68';\n  url;\n  reports=[];\n  errorMsg=\"City not found\";\n  units='metric';\n\n\n  constructor( private http:HttpClient) { \n    this.url=\"api.openweathermap.org/data/2.5/weather?q=\";\n    \n\n  }\n\n  getWeather(city){\n    return this.http.get(\"http://\"+this.url+ city+\"&units=\"+this.units +'&APPID='+this.apiKey)\n             .pipe(catchError(this.errorHandler))\n  }\n\n  errorHandler(err:HttpErrorResponse){\n        return Observable.throw(\"city not found\");\n  }\n\n\n\n  // settings\n\n  \n}","module.exports = \".container{\\r\\n    margin-top:15px;\\r\\n}\\r\\n\\r\\n.card-body{\\r\\n    color:teal;\\r\\n}\"","module.exports = \"<div class=\\\"container\\\">\\n\\n    <label for=\\\"cityName\\\" class=\\\"text-center\\\">type in a city and find out the weather!</label>\\n    <input type=\\\"text\\\" id=\\\"cityName\\\" class=\\\"form-control\\\">\\n    <p style=\\\"color:red\\\">{{errorMessage}}</p>\\n\\n    <button class=\\\"btn btn-success\\\" (click)=\\\"onAddCity()\\\">Add City!</button>\\n    <br>\\n    <div class=\\\"container\\\">\\n        <div class=\\\"card\\\" *ngFor=\\\"let cityCard of cityCards\\\">\\n            <div class=\\\"card-header\\\">\\n                {{cityCard.name}} ( {{cityCard.sys.country}} )\\n            </div>\\n            <div class=\\\"card-body\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-4\\\">\\n                        <p> Description: {{cityCard.weather[0].description}}</p>\\n                        <p> Current Temp: {{cityCard.main.temp}}</p>\\n                        <p> Humidity: {{cityCard.main.humidity}}</p>\\n                    </div>\\n                    <div class=\\\"col-4\\\">\\n                        <p> Max-Temp: {{cityCard.main.temp_max}}</p>\\n                        <p> Min-Temp: {{cityCard.main.temp_min}}</p>\\n\\n                    </div>\\n                    <div class=\\\"col-4 align-self-center\\\">\\n                        \\n                        \\n                        <button class=\\\"btn btn-primary\\\" [id]=\\\"cityCard.name\\\" (click)=\\\"onUpdate($event.target.id)\\\">Update</button>\\n                        <!-- <p> last updated {{ }} ago</p> -->\\n                        <button class=\\\"btn btn-primary\\\" [id]=\\\"cityCard.name\\\" (click)=\\\"onDelete($event.target.id)\\\">Delete</button>\\n                    </div>\\n                </div>\\n            </div>\\n            <!-- <div class=\\\"card-footer\\\">\\n                last upated on : {{ lastUpdated }}\\n            </div> -->\\n        </div>\\n    </div>\\n\\n\\n\\n\\n\\n\\n\\n\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { dataService } from '../data.service';\nimport { Observable } from 'rxjs/internal/Observable';\n\n\n\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  \n  cityCards = this.weather.reports;\n  errorMessage: string;\n\n  constructor(private weather: dataService) { }\n\n  \n\n  // Add a city to the display home screen\n\n  onAddCity() {\n    var city = (<HTMLInputElement>document.getElementById('cityName')).value;\n    if (this.errorMessage !== null) {\n      this.errorMessage = null;\n    }\n\n    // check if city already exists in reports\n    if (this.search(this.weather.reports, city) || this.search(this.weather.reports, city)=== 0 ) {\n      this.errorMessage = \"City already on the list\";\n    }\n    else {\n      this.errorMessage = null;\n\n      // subscribe to the service method that send the get request\n      // and pushes response to the array of reports \n      // handle error if city the inserted city wasnt found\n\n      this.weather.getWeather(city).subscribe((res) => this.weather.reports.push(res),\n        (error) => this.errorMessage = \"City not found\");\n    }\n  }\n\n\n  // search for if a city in the reports, returns true or false\n  search(arr, city) {\n    var i = 0;\n    while (i < arr.length) {\n      if (arr[i].name.toLowerCase() == city.toLowerCase()) {\n        return i;}\n      i++;\n    }\n    return false\n}\n\n  // update the clicked city weather\n  onUpdate(e) {\n    console.log(e);\n    // get the city index in the current array of reports\n    var indexOfCity:any = this.search(this.weather.reports, e);\n\n    // subscribe and replace the new response with the old // no need to handle an error\n    this.weather.getWeather(e).subscribe((res) => this.weather.reports.splice(indexOfCity, 1, res));\n    \n  }\n\n\n  onDelete(e) {\n    var indexOfCity:any = this.search(this.weather.reports, e);\n    this.weather.reports.splice(indexOfCity, 1);\n  }\n\n  ngOnInit() {\n  \n  }\n  \n}\n","import {NgModule} from '@angular/core';\r\nimport {MatButtonModule, MatCheckboxModule,\r\n        MatIconModule, MatSlideToggleModule,\r\n        MatButtonToggleModule} from '@angular/material';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n            MatButtonModule, \r\n            MatCheckboxModule,\r\n            MatIconModule,\r\n            MatSlideToggleModule,\r\n            MatButtonToggleModule\r\n        ],\r\n  exports: [\r\n            MatButtonModule, \r\n            MatCheckboxModule,\r\n            MatIconModule,\r\n            MatSlideToggleModule,\r\n            MatButtonToggleModule\r\n        ],\r\n})\r\n\r\n\r\nexport class MaterialModule { }","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"card\\\">\\n    <div class=\\\"card-header\\\">\\n      Choose units format:\\n    </div>\\n    <div class=\\\"card-body\\\">\\n\\n      <mat-button-toggle-group name=\\\"fontStyle\\\" aria-label=\\\"Font Style\\\">\\n        <mat-button-toggle id=\\\"metric\\\" checked>Celsius</mat-button-toggle>\\n        <mat-button-toggle id=\\\"imperial\\\" >Fahrenheit</mat-button-toggle>\\n      </mat-button-toggle-group>\\n    </div>\\n\\n\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { dataService } from '../data.service';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.css']\n})\nexport class SettingsComponent implements OnInit {\n\n\n  constructor(private weather:dataService) {\n\n   }\n    \n\n   ngOnInit(){\n   }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport 'hammerjs';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}